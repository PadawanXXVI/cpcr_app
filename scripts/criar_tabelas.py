import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from flask import Flask
from configuracoes import DevelopmentConfig
from modelos import db, Usuario, Processo, Movimentacao, LogSistema, Status, Demanda, RegiaoAdministrativa
from sqlalchemy import text

app = Flask(__name__)
app.config.from_object(DevelopmentConfig)
db.init_app(app)

with app.app_context():
    print("üîÑ Iniciando cria√ß√£o do banco de dados 'cr_novacap'...")

    # Tabelas que podem ser removidas (exceto usu√°rios)
    tabelas_para_apagar = [Movimentacao, Processo, LogSistema, Status, Demanda, RegiaoAdministrativa]

    for tabela in tabelas_para_apagar:
        print(f"üß® Apagando tabela: {tabela.__tablename__}")
        with db.engine.connect() as conn:
            conn.execute(text(f"DROP TABLE IF EXISTS {tabela.__tablename__} CASCADE"))

    db.create_all()
    print("‚úÖ Tabelas criadas com sucesso.")

    # Regi√µes Administrativas
    if not RegiaoAdministrativa.query.first():
        ras = [
            ("RA I", "Plano Piloto"), ("RA II", "Gama"), ("RA III", "Taguatinga"),
            ("RA IV", "Brazl√¢ndia"), ("RA V", "Sobradinho"), ("RA VI", "Planaltina"),
            ("RA VII", "Parano√°"), ("RA VIII", "N√∫cleo Bandeirante"), ("RA IX", "Ceil√¢ndia"),
            ("RA X", "Guar√°"), ("RA XI", "Cruzeiro"), ("RA XII", "Samambaia"),
            ("RA XIII", "Santa Maria"), ("RA XIV", "S√£o Sebasti√£o"), ("RA XV", "Recanto das Emas"),
            ("RA XVI", "Lago Sul"), ("RA XVII", "Riacho Fundo"), ("RA XVIII", "Lago Norte"),
            ("RA XIX", "Candangol√¢ndia"), ("RA XX", "√Åguas Claras"), ("RA XXI", "Riacho Fundo II"),
            ("RA XXII", "Sudoeste/Octogonal"), ("RA XXIII", "Varj√£o"), ("RA XXIV", "Park Way"),
            ("RA XXV", "SCIA/Estrutural"), ("RA XXVI", "Sobradinho II"), ("RA XXVII", "Jardim Bot√¢nico"),
            ("RA XXVIII", "Itapo√£"), ("RA XXIX", "SIA"), ("RA XXX", "Vicente Pires"),
            ("RA XXXI", "Fercal"), ("RA XXXII", "Sol Nascente e P√¥r do Sol"),
            ("RA XXXIII", "Arniqueira"), ("RA XXXIV", "Arapoanga"), ("RA XXXV", "√Ågua Quente")
        ]
        for cod, nome in ras:
            db.session.add(RegiaoAdministrativa(codigo=cod, nome=nome))

    # Demandas
    if not Demanda.query.first():
        demandas = sorted([
            "Alambrado (Cercamento)",
            "Boca de Lobo",
            "Bueiro",
            "Cal√ßada",
            "Doa√ß√£o de Mudas",
            "Estacionamentos",
            "Galeria de √Ågua Pot√°vel",
            "Galeria de √Åguas Pluviais",
            "Jardim",
            "Mato Alto",
            "Meio-fio",
            "Parque Infantil",
            "Passagem Subterr√¢nea",
            "Passarela",
            "Pisos Articulados",
            "Pista de Skate",
            "Poda / Supress√£o de √Årvore",
            "Ponto de Encontro Comunit√°rio (PEC)",
            "Pra√ßa",
            "Quadra de Esporte",
            "Rampa",
            "Recapeamento Asf√°ltico",
            "Tapa-buraco"
        ])
        for d in demandas:
            db.session.add(Demanda(nome=d))

    # Status
    if not Status.query.first():
        status = sorted([
            "Atendido",
            "Devolvido √† RA de origem - aus√™ncia de vistoria / fotogeorreferenciada",
            "Devolvido √† RA de origem - servi√ßo de implanta√ß√£o",
            "Devolvido √† RA de origem - servi√ßo de natureza continuada pela diretoria",
            "Enviado √† Diretoria das Cidades",
            "Enviado √† Diretoria de Obras",
            "Improcedente - tramita√ß√£o pelo SGIA"
        ])
        for s in status:
            db.session.add(Status(nome=s))

    db.session.commit()
    print("‚úÖ Dados din√¢micos inseridos com sucesso (se estavam ausentes).")
